import openai
from openai import OpenAI
import os
from telegram import Update, File, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import pandas as pd
import requests  # üìå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–∑–∞–ø—Ä–æ—Å–∞–º–∏

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEVELOPER_CHAT_ID = os.getenv('DEVELOPER_CHAT_ID')

if not OPENAI_API_KEY or not TELEGRAM_TOKEN or not DEVELOPER_CHAT_ID:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY, TELEGRAM_TOKEN –∏ DEVELOPER_CHAT_ID")

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai.api_key = OPENAI_API_KEY
client = OpenAI(api_key=OPENAI_API_KEY)

# ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Google Apps Script
GOOGLE_APPS_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbyVQo3NCKrtjHahNomfj0QjCiDVq_y3DW0naLc4AzuVAkoCSOAe5igPFg93FiZz-ldLmg/exec"

# ‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_menu_keyboard = [['/start', '/menu'], ['/help', '/upload'], ['/stop_server']]
reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ChatGPT. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:',
        reply_markup=reply_markup
    )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    menu_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥\n"
        "/help - –ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n"
        "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "/stop_server - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)\n"
    )
    await update.message.reply_text(menu_text, reply_markup=reply_markup)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "–≤—ã–≤–µ–¥–∏ <–Ω–æ–º–µ—Ä> —Å—Ç—Ä–æ–∫—É"
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_text = update.message.text.strip().lower()

    if "–≤—ã–≤–µ–¥–∏" in user_text and "—Å—Ç—Ä–æ–∫—É" in user_text:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            row_number = int(user_text.split()[1])

            # –ó–∞–ø—Ä–æ—Å –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Apps Script
            response = requests.get(GOOGLE_APPS_SCRIPT_URL)
            response.raise_for_status()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            data = response.json()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if row_number <= len(data):
                row_data = data[row_number - 1]
                message = f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ {row_number}:\n" + ", ".join(map(str, row_data))
            else:
                message = f"–°—Ç—Ä–æ–∫–∞ {row_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."

            await update.message.reply_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–≤—ã–≤–µ–¥–∏ <–Ω–æ–º–µ—Ä> —Å—Ç—Ä–æ–∫—É'.")

# ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('menu', menu))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

# ‚úÖ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == '__main__':
    main()
